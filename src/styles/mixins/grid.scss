//
// Grid
//

/**
 * Apply container styles
 */
@mixin make-container() {
  width: 100%;
  padding-right: $grid-gutter-width;
  padding-left: $grid-gutter-width;
  margin-right: auto;
  margin-left: auto;
}

/**
* For each breakpoint, define the maximum width of the container in a media query
*/
@mixin make-container-max-widths() {
  @each $breakpoint, $container-max-width in $container-max-widths {
    @include media-breakpoint-up($breakpoint) {
      max-width: $container-max-width;
    }
  }
}

/**
* Apply row styles
*/
@mixin make-row() {
  display: flex;
  flex-wrap: wrap;
  margin-right: -$grid-gutter-width;
  margin-left: -$grid-gutter-width;
}

/**
* Apply column styles
*/
@mixin make-col($size) {
  flex: none;
  // Add a `max-width` to ensure content within each column does not blow out
  // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
  // do not appear to require this.
  width: percentage($size / $grid-columns);
}

/**
* Generate the correct number of grid classes given any value of `$grid-columns
*/
@mixin make-grid-columns() {
  // Common properties for all breakpoints
  %grid-column {
    position: relative;
    width: 100%;
    min-height: 1px; // Prevent columns from collapsing when empty
    padding-right: $grid-gutter-width;
    padding-left: $grid-gutter-width;
  }

  @each $breakpoint in map-keys($grid-breakpoints) {
    $infix: breakpoint-infix($breakpoint);

    // Allow columns to stretch full width below their breakpoints
    @for $i from 1 through $grid-columns {
      .col#{$infix}-#{$i} {
        @extend %grid-column;
      }
    }

    .col#{$infix},
    .col#{$infix}-auto {
      @extend %grid-column;
    }

    @include media-breakpoint-up($breakpoint) {
      // Provide basic `.col-{bp}` classes for equal-width flexbox columns
      .col#{$infix} {
        flex-grow: 1;
        flex-basis: 0;
        max-width: 100%;
      }

      .col#{$infix}-auto {
        flex: 0 0 auto;
        width: auto;
        max-width: none; // Reset earlier grid tiers
      }

      @for $i from 1 through $grid-columns {
        .col#{$infix}-#{$i} {
          @include make-col($i);
        }
      }

      @for $i from 1 through $grid-columns {
        .order#{$infix}-#{$i} {
          order: $i;
        }
      }
    }
  }
}
